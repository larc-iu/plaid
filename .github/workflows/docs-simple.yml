name: Documentation Pipeline

on:
  push:
    branches: [ master, main ]
    paths:
      - 'docs/**'
      - 'src/**'
      - 'deps.edn'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ master, main ]
    paths:
      - 'docs/**'
      - 'src/**'
      - 'deps.edn'
      - '.github/workflows/docs.yml'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Setup Clojure
        uses: DeLaGuardo/setup-clojure@13.4
        with:
          cli: 'latest'

      - name: Cache Clojure dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
          key: ${{ runner.os }}-clojure-${{ hashFiles('deps.edn') }}
          restore-keys: |
            ${{ runner.os }}-clojure-

      - name: Start server and generate OpenAPI spec
        env:
          SKIP_ACCOUNT_CREATION_PROMPT: "true"
        run: |
          # Start the server in background
          clojure -M:dev -e "(do (require '[user :as u]) (u/start) (Thread/sleep 5000))" &
          SERVER_PID=$!
          
          # Wait for server to start
          timeout 30 bash -c 'until curl -f http://localhost:8085/api/v1/openapi.json > /dev/null 2>&1; do sleep 1; done'
          
          # Download OpenAPI spec
          curl -o target/openapi.json http://localhost:8085/api/v1/openapi.json
          
          # Stop server
          kill $SERVER_PID || true

      - name: Generate client libraries
        run: |
          mkdir -p target/clients
          clojure -M:gen target/openapi.json target/clients/client.js js
          clojure -M:gen target/openapi.json target/clients/client.py py

      - name: Setup Ruby for AsciiDoc
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'

      - name: Install AsciiDoctor
        run: |
          gem install asciidoctor
          gem install asciidoctor-diagram

      - name: Create docs build directory
        run: |
          mkdir -p docs-build
          mkdir -p docs-build/api
          mkdir -p docs-build/clients
          mkdir -p docs-build/manual

      - name: Generate Swagger UI
        run: |
          # Create Swagger UI using CDN
          mkdir -p docs-build/api/swagger-ui
          
          cat > docs-build/api/swagger-ui/index.html << 'SWAGGEREOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Plaid API Documentation</title>
            <link rel="stylesheet" type="text/css" href="https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui.css" />
            <style>
              html { box-sizing: border-box; overflow: -moz-scrollbars-vertical; overflow-y: scroll; }
              *, *:before, *:after { box-sizing: inherit; }
              body { margin:0; background: #fafafa; }
            </style>
          </head>
          <body>
            <div id="swagger-ui"></div>
            <script src="https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui-bundle.js"></script>
            <script src="https://unpkg.com/swagger-ui-dist@5.9.0/swagger-ui-standalone-preset.js"></script>
            <script>
              window.onload = function() {
                const ui = SwaggerUIBundle({
                  url: '../../openapi.json',
                  dom_id: '#swagger-ui',
                  deepLinking: true,
                  presets: [
                    SwaggerUIBundle.presets.apis,
                    SwaggerUIStandalonePreset
                  ],
                  plugins: [
                    SwaggerUIBundle.plugins.DownloadUrl
                  ],
                  layout: "StandaloneLayout"
                });
              };
            </script>
          </body>
          </html>
          SWAGGEREOF

      - name: Compile AsciiDoc files
        run: |
          # Compile landing page with default AsciiDoctor styling
          asciidoctor -o docs-build/index.html docs/landing.adoc
          
          # Compile technical manual
          asciidoctor -o docs-build/manual/index.html docs/book.adoc

      - name: Copy OpenAPI spec
        run: |
          cp target/openapi.json docs-build/

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs-build
          publish_branch: gh-pages
          force_orphan: true